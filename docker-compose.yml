version: "3.3"

volumes:
  registry-data:
  gitea-data:
  drone-data:
  webdav-data:
  influxdb-data:
  grafana-data:

services:

  proxy:
    image: traefik:1.7
    command:
      #- --debug
      - --accesslog=false
      - --loglevel=INFO
      - --entrypoints=Name:api Address::8080 Redirect.Entrypoint:https
      - --entrypoints=Name:http Address::80 Redirect.Entrypoint:https
      - --entrypoints=Name:https Address::443 TLS
      - --defaultentrypoints=http,https
      - --api
      - --api.entrypoint=api
      - --api.dashboard=true
      - --docker=true
      - --docker.endpoint=unix:///var/run/docker.sock
      - --docker.watch=true
      - --docker.exposedByDefault=false
      - --docker.domain=go-nerd.de
      - --acme=true
      #- --acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      - --acme.acmelogging=true
      - --acme.email=${ACME_EMAIL?Variable ACME_EMAIL not set}
      - --acme.domains=traefik.${DOMAIN?Variable DOMAIN is not set},ide.${DOMAIN?Variable DOMAIN is not set},registry.${DOMAIN?Variable DOMAIN is not set},hub.${DOMAIN?Variable DOMAIN is not set},git.${DOMAIN?Variable DOMAIN is not set},ci.${DOMAIN?Variable DOMAIN is not set},webdav.${DOMAIN?Variable DOMAIN is not set},ops.${DOMAIN?Variable DOMAIN is not set}
      - --acme.storage=/acme/acme.json
      - --acme.entrypoint=https
      - --acme.onhostrule=true
      - --acme.httpchallenge.entrypoint=http
      - --metrics.influxdb=true
      - --metrics.influxdb.protocol=http
      - --metrics.influxdb.address=http://${INFLUXDB_WRITE_USER:-write}:${INFLUXDB_WRITE_PASS:-write}@influxdb:8086
      - --metrics.influxdb.database=demo
      - --metrics.influxdb.retentionpolicy=autogen
    ports:
      - 80:80
      - 443:443
    volumes:
      - /acme:/acme
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always
    labels:
      traefik.enable: "true"
      traefik.api.frontend.rule: "HostRegexp: traefik.{domain:.+}"
      traefik.api.frontend.auth.basic.users: "${TRAEFIK_API_CREDS?Variable TRAEFIK_API_CREDS not set. Fill with <htpasswd -nbB admin PASS>.}"
      traefik.api.port: 8080

  dind:
    image: docker:stable-dind
    privileged: true

  ide:
    image: nicholasdille/code-container
    build:
      context: github.com/nicholasdille/code-container
    environment:
      - DOCKER_HOST=tcp://dind:2375
      - EDITOR_CLONE=https://github.com/nicholasdille/Sessions
      - EDITOR_EXTENSIONS=peterjausovec.vscode-docker
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: "HostRegexp: ide.{domain:.+}"
      traefik.frontend.auth.basic.users: "${IDE_CREDS?Variable IDE_CREDS not set. Fill with <htpasswd -nbB admin PASS>.}"
      traefik.port: 8443

  registry:
    image: nicholasdille/registry
    build:
      context: ./registry
      args:
        version: 2
    ports:
      - 5000:5000
    volumes:
      - "registry-data:/var/lib/registry"
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: "HostRegexp: registry.{domain:.+}"
      traefik.frontend.auth.basic.users: "${REGISTRY_CREDS?Variable REGISTRY_CREDS not set. Fill with <htpasswd -nbB admin PASS>.}"
      traefik.port: 5000

  hub:
    image: joxit/docker-registry-ui:static
    depends_on:
      - registry
    environment:
      REGISTRY_URL: "http://registry:5000"
      REGISTRY_TITLE: "registry @ ${DOMAIN?Variable DOMAIN is not set}"
      PULL_URL: "registry.${DOMAIN?Variable DOMAIN is not set}"
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: "HostRegexp: hub.{domain:.+}"
      traefik.api.frontend.auth.basic.users: "${HUB_CREDS?Variable HUB_CREDS not set. Fill with <htpasswd -nbB admin PASS>.}"
      traefik.port: 80

  gitea:
    image: nicholasdille/gitea
    build:
      context: ./gitea
      args:
        version: 1.8
    environment:
      INSTALL_LOCK: "true"
      GITEA_ADMIN_NAME: ${GITEA_ADMIN_NAME:-root}
      GITEA_ADMIN_PASS: ${GITEA_ADMIN_PASS:-G!t34}
      GITEA_ADMIN_MAIL: ${GITEA_ADMIN_MAIL:-root@gitea}
      APP_NAME: "Gitea @ ${DOMAIN?Variable DOMAIN is not set}"
      ROOT_URL: "https://git.${DOMAIN?Variable DOMAIN is not set}"
      DISABLE_REGISTRATION: "true"
      REQUIRE_SIGNIN_VIEW: "true"
      SSH_DOMAIN: "git.${DOMAIN?Variable DOMAIN is not set}"
      SSH_PORT: 2222
    ports:
      - "2222:22"
    volumes:
      - "gitea-data:/data"
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: "HostRegexp: git.{domain:.+}"
      traefik.port: 3000

  drone:
    image: drone/drone:1.2
    depends_on:
      - gitea
    volumes:
      - drone-data:/var/lib/drone/
    environment:
      DRONE_RPC_SECRET: "${DRONE_SECRET:-mydronesecret}"
      DRONE_SERVER_HOST: "drone"
      DRONE_SERVER_PROTO: "http"
      DRONE_TLS_AUTOCERT: "false"
      DRONE_AGENTS_ENABLED: "true"
      DRONE_USER_CREATE: "username:${GITEA_ADMIN_NAME:-root},admin:true"
      DRONE_GITEA_SERVER: "http://gitea:3000"
      DRONE_GIT_ALWAYS_AUTH: "true"
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: "HostRegexp: ci.{domain:.+}"
      traefik.port: 80

  drone-agent:
    image: drone/agent:1.2
    command: agent
    depends_on:
      - drone
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      DRONE_RPC_SERVER: "http://drone"
      DRONE_RPC_SECRET: "${DRONE_SECRET:-mydronesecret}"
      DRONE_RUNNER_CAPACITY: 1

  webdav:
    image: nicholasdille/nginx-webdav
    build:
      context: webdav
    volumes:
      - webdav-data:/data
    environment:
      WEBDAV_CREDS: "${WEBDAV_CREDS?Variable WEBDAV_CREDS not set. Fill with <htpasswd -nb admin PASS>.}"
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: "HostRegexp: webdav.{domain:.+}"
      traefik.port: 80

  influxdb:
    image: influxdb:1.7-alpine
    environment:
      INFLUXDB_DB: "${INFLUDB_DATABASE:-demo}"
      INFLUXDB_ADMIN_USER: "${INFLUXDB_ADMIN_USER:-admin}"
      INFLUXDB_ADMIN_PASSWORD: "${INFLUXDB_ADMIN_PASS:-admin}"
      INFLUXDB_READ_USER: "${INFLUXDB_READ_USER:-read}"
      INFLUXDB_READ_PASSWORD: "${INFLUXDB_READ_PASS:-read}"
      INFLUXDB_WRITE_USER: "${INFLUXDB_WRITE_USER:-write}"
      INFLUXDB_WRITE_PASSWORD: "${INFLUXDB_WRITE_PASS:-write}"
    volumes:
      - "influxdb-data:/var/lib/influxdb"

  grafana:
    image: grafana/grafana:latest
    environment:
      GF_SERVER_ROOT_URL: "https://ops.${DOMAIN?Variable DOMAIN is not set}"
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_ADMIN_PASS?Variable GRAFANA_ADMIN_PASS is not set}"
    depends_on:
      - influxdb
    volumes:
      - "grafana-data:/var/lib/grafana"
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: "HostRegexp: ops.{domain:.+}"
      traefik.port: 3000

  telegraf:
    image: telegraf:1.11-alpine
    entrypoint: "sh"
    command: "-c 'echo \"$${INFLUXDB_CONF}\" > /etc/telegraf/telegraf.conf && exec telegraf'"
    environment:
      INFLUXDB_CONF: |
        [[inputs.docker]]
          endpoint = "unix:///var/run/docker.sock"

        [[outputs.influxdb]]
          urls = ["$$INFLUXDB_URL"]
          database = "$$INFLUXDB_NAME"
          username = "$$INFLUXDB_USER"
          password = "$$INFLUXDB_PASS"
      INFLUXDB_URL: "http://influxdb:8086"
      INFLUXDB_NAME: "${INFLUDB_DATABASE:-demo}"
      INFLUXDB_USER: "${INFLUXDB_WRITE_USER:-write}"
      INFLUXDB_PASS: "${INFLUXDB_WRITE_PASS:-write}"
    depends_on:
      - influxdb
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
